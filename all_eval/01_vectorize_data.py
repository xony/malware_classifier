#!/usr/bin/env python

# take all the traces and convert it to different kinds of libsvm compatible vector data:
# 1) Binary syscall format -> just indicate whether some syscall happened or not
# 2) Frequency-based view  -> count the number of occurences (and fix a weighting?)
# 3) Sequence-based view   -> output a string like sequence syscalls for sequence kernels

import sys, argparse, string, os, fileinput, glob, config, json

from config import *

def readSyscallMapping(mapfile):
    syscall_nrs = {}
    mapping = open(mapfile,'r')
    for line in mapping:
	syscall = string.split(line,":")[0]
	syscall_nr = int(string.split(line,":")[1].rstrip())
	if syscall not in syscall_nrs.keys():
	    syscall_nrs[syscall] = syscall_nr
    mapping.close()
    return syscall_nrs

def vectorizeSparseFrequency(path,directory):
    sparseCalls = ['exit','read','write','open','close','brk','ioctl','sendto','sendmsg','recvfrom','recvmsg'] 
    vector = [0]*len(sparseCalls)
    if directory:
	tracefile = path
    else:
	tracefile = fileinput.input(path)
    for line in tracefile:
	syscall = string.split(line,'(')[0]
	if syscall in sparseCalls:
	    vector[sparseCalls.index(syscall)] += 1
    return vector

def vectorizeCompleteSequence(path, feats_dict):
    

    s = '' 
    
    tracefile = fileinput.input(path)
    for line in tracefile:
        syscall = string.split(line,'(')[0]
        if syscall in feats_dict:
            s+= feats_dict[syscall]
    return s 


def vectorizeCompleteFrequency(path,mapping_dict):

    vector = [0]*len(mapping_dict) 
    
    tracefile = fileinput.input(path)
    for line in tracefile:
	syscall = string.split(line,'(')[0]
	if syscall in mapping_dict:
	    vector[mapping_dict[syscall]] += 1
    return vector 

def frequencyToBinary(input_vector):
    binary_vector = []
    for syscall in input_vector:
        if syscall == 0:
            binary_vector.append(0)
        else:
            binary_vector.append(1) 
    return binary_vector


if __name__ == '__main__':
    # first get all the directories in the traces dir
    # these will contain the actual trace files and are named according to the apk
    benign_traces = os.listdir(BENIGN_TRACE_DIRECTORY)
    malicious_traces = os.listdir(MALICIOUS_TRACE_DIRECTORY)

#    for dirname in os.listdir(BENIGN_TRACE_DIRECTORY):
#        benign_traces.append(dirname)
#
#    for dirname in os.listdir(MALICIOUS_TRACE_DIRECTORY):
#        malicious_traces.append(dirname)    

    # load unused features
    with open("./sequence_mapping.json",'r') as infile:
        seq_feats = json.load(infile)

    # load mapping of features
    with open("./mapping_tight.json",'r') as infile:
        mapping_tight = json.load(infile)


    seq_feat_mapping_dict = {}
    for index, value in enumerate(seq_feats):
        seq_feat_mapping_dict[value] = chr(index)

    tight_feat_mapping_dict = {}
    for index, value in enumerate(mapping_tight):
        tight_feat_mapping_dict[value] = index

    # go through the syscalls and create frequency based mapping
    def traverse_dirs(tracefiles, trace_dir, svmdata_dir):
        for dirname in tracefiles:
            sequence_vectors = []
            frequency_vectors = []
            binary_vectors  = []
            for filename in os.listdir(trace_dir + "/" + dirname):
                sys.stdout.write('.')
                sys.stdout.flush()
                sequence_vector = vectorizeCompleteSequence(trace_dir + "/" + dirname + "/" + filename, seq_feat_mapping_dict)
                sys.stdout.write('s')
                sys.stdout.flush()
                frequency_vector = vectorizeCompleteFrequency(trace_dir + "/" + dirname + "/" + filename, tight_feat_mapping_dict)
                sys.stdout.write('f')
                sys.stdout.flush()
                binary_vector = frequencyToBinary(frequency_vector)
                sys.stdout.write('b')
                sys.stdout.flush()
                
                if len(sequence_vector) >= 50:
                
                    sequence_vectors.append(sequence_vector)
                    frequency_vectors.append(frequency_vector)
                    binary_vectors.append(binary_vector)

            
            sys.stdout.write('\n')
            sys.stdout.flush()
        

            if len(frequency_vectors) > 0:
                if not os.path.exists(svmdata_dir + "/" + dirname):
                    os.makedirs(svmdata_dir + "/" + dirname)
                with open(svmdata_dir + "/" + dirname + "/" + "sequence_vectors", 'w') as outfile:
                    json.dump(sequence_vectors, outfile)
                with open(svmdata_dir + "/" + dirname + "/" + "frequency_vectors", 'w') as outfile:
                    json.dump(frequency_vectors, outfile)
                with open(svmdata_dir + "/" + dirname + "/" + "binary_vectors", 'w') as outfile:
                    json.dump(binary_vectors, outfile)
            print "Finished ", dirname

    traverse_dirs(benign_traces, BENIGN_TRACE_DIRECTORY, BENIGN_SVMDATA_DIRECTORY)
    traverse_dirs(malicious_traces, MALICIOUS_TRACE_DIRECTORY, MALICIOUS_SVMDATA_DIRECTORY)
