#!/usr/bin/env python
# encoding: utf-8
#
# This script will load the previously saved svm-data and create a model with the help on ocsvm.
# We just test the model against the trained data and therefore check the true positive rate,
# so that at least we do not classify training samples as outliers.
#

import numpy as np
import os, json, math
from config import *

from modshogun import LongIntFeatures, RealFeatures, GaussianKernel, LibSVMOneClass

#parameter_list = [[traindat,testdat,2.2,1,1e-7],[traindat,testdat,2.1,1,1e-5]]

def train_oneclass (train_data,width=2,C=10,epsilon=1e-7, nu=1e-4):

        feat_array = np.transpose(np.array(train_data))
        #print feat_array.shape
        feats_train=LongIntFeatures(feat_array)

        kernel=GaussianKernel(feats_train, feats_train, width)
        svm=LibSVMOneClass(C, kernel)
        #svm.set_epsilon(epsilon)
        svm.set_nu(nu)
        svm.train()
        return svm


def test_oneclass (test_data, svm, width_current):

        feat_array= np.transpose(np.array(test_data))
        #print feat_array.shape
        feats_test=LongIntFeatures(feat_array)
        predictions = svm.apply(feats_test)
        #return predictions, svm, predictions.get_labels()
        negative = 0
        positive = 0
        for i in predictions.get_labels():
            if i > 0:
                positive += 1
            else:
                negative += 1
        percentage = float(positive) / float(negative+positive)
        print "nu", svm.get_nu(), "width", width_current,"supv",svm.get_num_support_vectors(),"positive", positive, "negative", negative, "percentage positive:", percentage 
        return percentage 

if __name__ == '__main__':

    # load all the saved svm data
    all_sequence_vectors_benign = []
    all_frequency_vectors_benign = [] 
    all_binary_vectors_benign  = []
    with open(BENIGN_SVMDATA_DIRECTORY + "/" + "sequence_vectors", 'r') as infile:
        all_sequence_vectors_benign = json.load(infile)
    with open(BENIGN_SVMDATA_DIRECTORY + "/" + "frequency_vectors", 'r') as infile:
        all_frequency_vectors_benign = json.load(infile)
    with open(BENIGN_SVMDATA_DIRECTORY + "/" + "binary_vectors", 'r') as infile:
        all_binary_vectors_benign = json.load(infile)
    
    all_sequence_vectors_malicious = []
    all_frequency_vectors_malicious = [] 
    all_binary_vectors_malicious  = []
    with open(MALICIOUS_SVMDATA_DIRECTORY + "/" + "sequence_vectors", 'r') as infile:
        all_sequence_vectors_malicious = json.load(infile)
    with open(MALICIOUS_SVMDATA_DIRECTORY + "/" + "frequency_vectors", 'r') as infile:
        all_frequency_vectors_malicious = json.load(infile)
    with open(MALICIOUS_SVMDATA_DIRECTORY + "/" + "binary_vectors", 'r') as infile:
        all_binary_vectors_malicious = json.load(infile)
 
    length = len(all_binary_vectors_benign[0])
    print "featuredim:", length
    print "number of vectors in ben:", len(all_binary_vectors_benign)
    print "number of vectors in mal:", len(all_binary_vectors_malicious)

    print "BINARY CLASSIFIER TRAINING", "*" * 16

    print "Finding Binary Classifier params.."
    bin_best_falsepos = 0
    bin_best_nu = 0
    freq_best_falsepos = 0
    freq_best_nu = 0

    bin_all_falsepos = []
    bin_all_nu = []
    bin_all_width = []
    freq_all_falsepos = []
    freq_all_nu = []
    freq_all_width = []
 
    for j in np.arange(20.1,80,0.5):
        for i in range(50):
            nu_current = 1 * math.pow(0.8,i)
            width_current = j
            svm_binary = train_oneclass(all_binary_vectors_benign, width=width_current, nu=nu_current)
            # TODO: choose appropriate split for eval
            bin_current_falsepos = test_oneclass(all_binary_vectors_benign, svm_binary, width_current)
            if bin_current_falsepos > bin_best_falsepos:
                bin_best_nu = nu_current
                bin_best_width = width_current
                bin_best_falsepos = bin_current_falsepos
            svm_frequency = train_oneclass(all_frequency_vectors_benign, width=width_current, nu=nu_current)
            freq_current_falsepos = test_oneclass(all_frequency_vectors_benign, svm_frequency, width_current)
            if freq_current_falsepos > freq_best_falsepos:
                freq_best_nu = nu_current
                freq_best_width = width_current
                freq_best_falsepos = freq_current_falsepos
            bin_all_falsepos.append(bin_current_falsepos)
            bin_all_nu.append(nu_current)
            bin_all_width.append(width_current)
            freq_all_falsepos.append(freq_current_falsepos)
            freq_all_nu.append(nu_current)
            freq_all_width.append(width_current)

    print "bin best nu value:", bin_best_nu,"best width:",bin_best_width, "with 1-fp rate:", bin_best_falsepos
    print "frq best nu value:", freq_best_nu,"best width",freq_best_width, "with 1-fp rate:", freq_best_falsepos


    with open('results.txt', 'w') as outfile:
        outlist = []
        outlist.append(bin_all_nu)
        outlist.append(bin_all_width)
        outlist.append(bin_all_falsepos)
        outlist.append(freq_all_falsepos)
        json.dump(outlist, outfile, indent=2)
