#!/usr/bin/env python

import argparse, string, os, fileinput, glob

def help():
	parser = argparse.ArgumentParser(description='This scripts converts a sctrace-tracefile into a vector of the syscall invocation frequencies.')
	parser.add_argument('tracefile', action='store', help='path to tracefile(s)') 
	parser.add_argument('-m', dest='syscall_mapping', action='store', default='syscall_matching_arm', help='specify a file that maps the syscalls to their corresponding syscall-numbers (default:arm-mapping)')
	parser.add_argument('-s', dest='sparse', action='store_true', default=False, help='get a sparse vector consisting of the frequencies of the 10 most important syscalls')
	parser.add_argument('-c', dest='complete', action='store_true', default=False, help='get a vector consisting of the frequencies of ALL syscalls')
	parser.add_argument('-l', dest='libsvmformat', action='store_true', default=False, help='print out vector in libSVM format')
	parser.add_argument('-p', dest='plainformat', action='store_true', default=False, help='print out vector in plain format')
	parser.add_argument('-d', dest='directory', action='store_true', default=False, help='positional argument is a tracefile directory')
	return parser.parse_args()

def readDirectory(args):
	path = args.tracefile
	sparse = args.sparse
	listing = glob.glob(os.path.join(path, 'tracefile*'))
	mapping = args.syscall_mapping
	for infile in listing:
		finput = fileinput.input([infile])
		if sparse:
			vector = vectorizeSparse(finput,True)
		else:
			vector = vectorizeComplete(finput,mapping,True)
		if args.libsvmformat:
			printLibSVMFormatted(vector)
		elif args.plainformat:
			printPlainFormatted(vector)	
		finput.close()

def readSyscallMapping(mapfile):
	syscall_nrs = {}
	mapping = open(mapfile,'r')
	for line in mapping:
		syscall = string.split(line,":")[0]
		syscall_nr = int(string.split(line,":")[1].rstrip())
		if syscall not in syscall_nrs.keys():
			syscall_nrs[syscall] = syscall_nr
	mapping.close()
	return syscall_nrs

def vectorizeSparse(path,directory):
	sparseCalls = ['exit','read','write','open','close','brk','ioctl','sendto','sendmsg','recvfrom','recvmsg'] 
	vector = [0]*len(sparseCalls)
	if directory:
		tracefile = path
	else:
		tracefile = fileinput.input(path)
	for line in tracefile:
		syscall = string.split(line,'(')[0]
		if syscall in sparseCalls:
			vector[sparseCalls.index(syscall)] += 1
	return vector

def vectorizeCompGap(args):
	mapping = readSyscallMapping(args)
	# 450 is last syscall number (notice: the vector contains gaps since some strace-syscall-names map to multiple syscall numbers
	vector = [0]*451 
	path = args.tracefile
	tracefile = fileinput.input(path)
	for line in tracefile:
		syscall = string.split(line,'(')[0]
		if syscall in mapping:
			vector[int(mapping[syscall])] += 1
	return vector

def vectorizeComplete(path,mapfile,directory):
	mapping = readSyscallMapping(mapfile)
	maplist = list()
	for i in sorted(mapping.items(), key=lambda x:x[1]):
		maplist.append(i[0])
	vector = [0]*len(maplist) 
	if directory:
		tracefile = path
	else:
		tracefile = fileinput.input(path)
	for line in tracefile:
		syscall = string.split(line,'(')[0]
		if syscall in maplist:
			vector[int(maplist.index(syscall))] += 1
	return vector 

def printLibSVMFormatted(vector):
	print '0 '+' '.join([str(pos+1)+':'+str(item) for pos,item in enumerate(vector)])

def printPlainFormatted(vector):
	print ' '.join(map(str,vector))

def main():
	args = help()
	if args.directory: 
		readDirectory(args)
	elif not args.directory and args.sparse and args.libsvmformat:
		path = args.tracefile
		vector = vectorizeSparse(path,False)
		printLibSVMFormatted(vector)
	elif not args.directory and args.complete and args.libsvmformat:
		path = args.tracefile
		mapfile = args.syscall_mapping 
		vector = vectorizeComplete(path,mapfile,False)
		printLibSVMFormatted(vector)
	else:
		print("Error: too few arguments")

if __name__ == "__main__":
	main()
