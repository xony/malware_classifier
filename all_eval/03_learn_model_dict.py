#!/usr/bin/env python
# encoding: utf-8
#
#
# This script will load the data from svmdata and do a grid search on the nu and width parameters
# if the RBF kernel is used
#


 
import numpy as np
import os, json, math
from config import *

from modshogun import LongIntFeatures, RealFeatures, GaussianKernel, LibSVMOneClass


def train_oneclass (train_data,width=2,C=10,epsilon=1e-7, nu=1e-4):

        feat_array = np.transpose(np.array(train_data))
        #print feat_array.shape
        feats_train=LongIntFeatures(feat_array)

        kernel=GaussianKernel(feats_train, feats_train, width)
        svm=LibSVMOneClass(C, kernel)
        #svm.set_epsilon(epsilon)
        svm.set_nu(nu)
        svm.train()
        return svm


def test_oneclass (test_data, svm, width_current):
        # the width is only needed for displaying purposes, the actual value is inside the SVM!        

        feat_array= np.transpose(np.array(test_data))
        #print feat_array.shape
        feats_test=LongIntFeatures(feat_array)
        predictions = svm.apply(feats_test)
        #return predictions, svm, predictions.get_labels()
        negative = 0
        positive = 0
        for i in predictions.get_labels():
            if i > 0:
                positive += 1
            else:
                negative += 1
        percentage = float(positive) / float(negative+positive)
        print "nu", svm.get_nu(), "width", width_current,"supv",svm.get_num_support_vectors(),"positive", positive, "negative", negative, "percentage positive:", percentage 
        raw_predictions = predictions.get_labels()
        return (percentage, raw_predictions)

def dict_to_list (leave_out, current_dict):
        l = [] # the list to give back
        for item in current_dict:
            if item not in leave_out:
                l.extend(current_dict[item])
        return l

def validate (nu_current, width_current, result_dict, traces_dict):
    # calculate how much of the training data gets recognized as benign 
    left_out_dict = {}
    left_out_dict["nu"] = nu_current
    left_out_dict["width"] = width_current
    testing_results = []

    # copy all vectors into list 
    leave_one_out_list = dict_to_list([], traces_dict)

    # train on all vectors 
    svm = train_oneclass(leave_one_out_list, width=width_current, nu=nu_current)

    # test on all vectors 
    percentage, testing_results = test_oneclass(leave_one_out_list, svm, width_current)

    left_out_dict["results"] = testing_results
    left_out_dict["percentage"] = percentage

    # save the results for binary
    result_dict[(nu_current,width_current)] = left_out_dict


if __name__ == '__main__':

    # load all the saved svm data
    with open(BENIGN_SVMDATA_DIRECTORY + "/" + "sequence_vectors", 'r') as infile:
        seq_dict_benign = json.load(infile)
    with open(BENIGN_SVMDATA_DIRECTORY + "/" + "frequency_vectors", 'r') as infile:
        frq_dict_benign = json.load(infile)
    with open(BENIGN_SVMDATA_DIRECTORY + "/" + "binary_vectors", 'r') as infile:
        bin_dict_benign = json.load(infile)
    
    with open(MALICIOUS_SVMDATA_DIRECTORY + "/" + "sequence_vectors", 'r') as infile:
        seq_dict_malicous = json.load(infile)
    with open(MALICIOUS_SVMDATA_DIRECTORY + "/" + "frequency_vectors", 'r') as infile:
        frq_dict_malicous = json.load(infile)
    with open(MALICIOUS_SVMDATA_DIRECTORY + "/" + "binary_vectors", 'r') as infile:
        bin_dict_malicous = json.load(infile)
 
    length = len(bin_dict_benign.values()[0][0])
    print "featuredim:", length
    print "number of apps in ben:", len(bin_dict_benign.values())
    print "number of apps in mal:", len(bin_dict_malicous.values())

    print "CLASSIFIER TRAINING", "*" * 16

    print "Finding Classifier params.."

    bin_results = {}
    frq_results = {}


    # this is the old routine for finding all the stuff without preselection:
    for j in np.arange(20.1,80,0.5):
        for i in range(50):
            nu = 1 * math.pow(0.8,i)
            width = j
            
            # do the leave one out cross evaluation for binary
            validate(nu, width, bin_results, bin_dict_benign)
            validate(nu, width, frq_results, frq_dict_benign)
            
           


    with open('candidates_bin.json', 'w') as outfile:
        json.dump(bin_results, outfile, indent=2)
    with open('candidates_frq.json', 'w') as outfile:
        json.dump(frq_results, outfile, indent=2)
