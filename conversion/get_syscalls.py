#!/usr/bin/env python

import argparse, string, os, fileinput, glob, json

def readDirectory(args):
	path = args.tracefile
	sparse = args.sparse
	listing = glob.glob(os.path.join(path, 'tracefile*'))
	mapping = args.syscall_mapping
	for infile in listing:
		finput = fileinput.input([infile])
		if sparse:
			vector = vectorizeSparse(finput,True)
		else:
			vector = vectorizeComplete(finput,mapping,True)
		if args.libsvmformat:
			printLibSVMFormatted(vector)
		elif args.plainformat:
			printPlainFormatted(vector)	
		finput.close()

def readSyscallMapping(mapfile):
	syscall_nrs = {}
	mapping = open(mapfile,'r')
	for line in mapping:
		syscall = string.split(line,":")[0]
		syscall_nr = int(string.split(line,":")[1].rstrip())
		if syscall not in syscall_nrs.keys():
			syscall_nrs[syscall] = syscall_nr
	mapping.close()
	return syscall_nrs

def vectorizeSparse(path,directory):
	sparseCalls = ['exit','read','write','open','close','brk','ioctl','sendto','sendmsg','recvfrom','recvmsg'] 
	vector = [0]*len(sparseCalls)
	if directory:
		tracefile = path
	else:
		tracefile = fileinput.input(path)
	for line in tracefile:
		syscall = string.split(line,'(')[0]
		if syscall in sparseCalls:
			vector[sparseCalls.index(syscall)] += 1
	return vector

def vectorizeComplete(path,mapfile,directory):
	mapping = readSyscallMapping(mapfile)
	maplist = list()
	for i in sorted(mapping.items(), key=lambda x:x[1]):
		maplist.append(i[0])
	vector = [0]*len(maplist) 
	if directory:
		tracefile = path
	else:
		tracefile = fileinput.input(path)
	for line in tracefile:
		syscall = string.split(line,'(')[0]
		if syscall in maplist:
			vector[int(maplist.index(syscall))] += 1
	return vector 

def main():

        mapping = readSyscallMapping("../syscall_matching_arm")

        maplist = list()
        for i in sorted(mapping.items(), key=lambda x:x[1]):
                maplist.append(i[0])

        print maplist

        with open("mapping_tight.json", 'w') as outfile:
            #for item in maplist:
            #    print >>outfile, item
            json.dump(maplist, outfile, indent=2)


if __name__ == "__main__":
	main()
