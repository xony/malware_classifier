#!/usr/bin/env python

import argparse, string, os, json 
from sklearn import preprocessing
def help():
	parser = argparse.ArgumentParser(description='This script converts traces from JSON into libsvm format with a subset of features.')
	parser.add_argument('benjsonfile', action='store', help='path to ben JSON tracefile') 
	parser.add_argument('maljsonfile', action='store', help='path to mal JSON tracefile') 
        parser.add_argument('libsvmfile', action='store', help='path to output libsvm file.')
	return parser.parse_args()

def dict_to_list (leave_out, current_dict):
        return_list = []
        for item in current_dict:
            return_list.append([float(i) for i in item])
        return return_list

def printCSVFormatted(vector, selected, classified):
        retstr = ""
        for i in selected:
            retstr += str(vector[i-1]) + ','
        retstr += classified + '\n'

	return retstr 

def printLibSVMFormatted(vector, features, classified):
        
        subvector = []
        for feat in features:
            subvector.append(vector[feat-1])
	return classified + ' '+' '.join([str(pos+1)+':'+str(item) for pos,item in enumerate(subvector)]) + '\n'

def printPlainFormatted(vector):
	return ' '.join(map(str,vector))

def main():
	args = help()

        selected_features = [2, 4, 5, 6, 7, 46, 55, 291, 297, 293, 298] # [143, 147, 241, 121, 46, 55, 264] #[12,64,68,145,173,192,241,249] #
        
        with open("../mapping_tight.json",'r') as infile:
            mapping = json.load(infile)

        with open(args.benjsonfile, 'r') as infile:
            ben_json_dict = json.load(infile)

        with open(args.maljsonfile, 'r') as infile:
            mal_json_dict = json.load(infile)

        ben_vector_list = dict_to_list([], ben_json_dict)
        mal_vector_list = dict_to_list([], mal_json_dict)

        min_max_scaler = preprocessing.MinMaxScaler()
        #min_max_scaler = preprocessing.StandardScaler()
        ben_vector_list = min_max_scaler.fit_transform(ben_vector_list)
        mal_vector_list = min_max_scaler.transform(mal_vector_list)

        with open(args.libsvmfile, 'w') as outfile:
            for vector in ben_vector_list:
                outfile.write(printLibSVMFormatted(vector, selected_features, '1'))
            
            for vector in mal_vector_list:
                outfile.write(printLibSVMFormatted(vector, selected_features, '-1'))

if __name__ == "__main__":
	main()
