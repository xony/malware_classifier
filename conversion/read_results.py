#!/usr/bin/env python

import csv, argparse, string, os, json 
import numpy as np
from tabulate import tabulate
from sklearn import preprocessing

HEADER = ['app', 'best accuracy', 'true negative rate', 'true positive rate',  'support vector ratio']
HEADER_ORDER_SHORT = ['app','order', 'best accuracy', 'true negative rate', 'true positive rate',  'support vector ratio']
HEADER_COMPLETE = ['app', 'best accuracy', 'true negative rate', 'true positive rate', 'benign traces', 'support vectors', 'elapsed_time']
HEADER_ORDER= ['app','order', 'best accuracy', 'true negative rate', 'true positive rate', 'benign traces', 'support vectors', 'elapsed_time']

RESFILE = "./accumulated_results.json"
TWOCLASSFILE = '/home/fgrossmann/git/mafred/monitoring/results/2class_single_res.json'

def help():
	parser = argparse.ArgumentParser(description='This script visualizes the results of a json result file.')
	parser.add_argument('jsonfile', action='store', help='path to ben JSON tracefile') 
        parser.add_argument('csvfile', action='store', help='path to output csv file.')
	return parser.parse_args()


def get_acc(ben_and_mal):
    total_items = len(ben_and_mal['ben']) + len(ben_and_mal['mal'])
    
    cn = 0
    for i in ben_and_mal['ben']:
        if i == +1:
            cn+=1

    cp = 0
    for i in ben_and_mal['mal']:
        if i == -1:
            cp+=1

    return((float(cp) + float(cn))/(total_items))


def printCSVFormatted(vector,kk):
        retstr = ""
        for k,v in vector.iteritems():
            if 'results' not in k:
                retstr += str(v)+','

        acc = get_acc(vector['results'])
        retstr+= str(acc) + ','
        retstr += kk + '\n'

	return retstr 

def printLibSVMFormatted(vector):
	return '0 '+' '.join([str(pos+1)+':'+str(item) for pos,item in enumerate(vector)]) + '\n'

def printPlainFormatted(vector):
	return ' '.join(map(str,vector))

def main():
	args = help()
        order = False
        with open("./15_mapping.json",'r') as infile:
            mapping = json.load(infile)

        reverse_mapping = {}
        for k,v in mapping.iteritems():
            reverse_mapping[v] = k

        with open(args.jsonfile, 'r') as infile:
            json_dict = json.load(infile)
        
        all_results = []
        all_complete_results = []
        for compared in json_dict:
        
            current_results = json_dict[compared]
            best_acc = 0
            best_v = {}
            with open(args.csvfile + compared + '.csv', 'w') as outfile:
                # first we need to print the labels
                for k in current_results[current_results.keys()[0]]:
                    if 'results' not in k:
                        outfile.write(k + ',')


                ben_and_mal = current_results[current_results.keys()[0]]['results']
                good_traces = len(ben_and_mal['ben'])
                bad_traces = len(ben_and_mal['mal'])
                total_items = good_traces + bad_traces 
                #print "total items in ", compared, 'are', total_items, "good traces:", good_traces, "mal traces:", bad_traces

                outfile.write('accuracy,')
                outfile.write('key\n')

                for k,v in current_results.iteritems():
                    outfile.write(printCSVFormatted(v,k))
                    new_acc = get_acc(v['results'])
                    if new_acc > best_acc:
                        best_acc = new_acc
                        best_v = v
                
                del(best_v['results'])
                #print "best accuracy was:", best_acc, 'values are:', best_v
                if 'order' not in best_v:
                    all_results.append( [mapping[compared], best_acc, best_v['correct_goodware'], best_v['correct_malware'], float( best_v['numsv']) / good_traces] )
                    all_complete_results.append( [mapping[compared], best_acc, best_v['correct_goodware'], best_v['correct_malware'],good_traces,  best_v['numsv'] , best_v['elapsed_time']] )
                else:
                    all_complete_results.append( [mapping[compared], best_v['order'], best_acc, best_v['correct_goodware'], best_v['correct_malware'], good_traces, best_v['numsv'], best_v['elapsed_time']] )
                    all_results.append( [mapping[compared],best_v['order'], best_acc, best_v['correct_goodware'], best_v['correct_malware'], float(best_v['numsv']) / good_traces] )
                    order= True
                
        with open(args.csvfile + "libre.csv",'w') as outfile:
            writer = csv.writer(outfile)
            writer.writerow(HEADER)
            writer.writerows(all_results)

        # sort the array
        all_results.sort(key=lambda x: x[0])
        all_complete_results.sort(key=lambda x: x[0])

        tmp = np.array(all_complete_results)
        tmp2 = np.array(all_results)
        if order:
            tmp = tmp[:,1:].astype(np.float)
            tmp2 = tmp2[:,1:].astype(np.float)
        else:
            tmp = tmp[:,1:].astype(np.float)
            tmp2 = tmp2[:,1:].astype(np.float)
        mean = np.mean(tmp, axis=0)
        mean2 = np.mean(tmp2, axis=0)
        result = ["average"]
        result2 = ["average"]
        if order:
            #avgorder = "{:.2f}".format(mean[0])
            avgorder = ''
            result.append(avgorder)
            result2.append(avgorder)
            result.extend(mean.tolist()[1:])
            result2.extend(mean2.tolist()[1:])
        else:
            result.extend(mean.tolist())
            result2.extend(mean2.tolist())
        all_complete_results.append(result)
        all_results.append(result2)


        with open(args.csvfile + '.tex','w') as outfile:
            if order:
                outfile.write(tabulate(all_results,floatfmt=".4f",numalign='center',tablefmt="latex",headers=HEADER_ORDER_SHORT))
            else:
                outfile.write(tabulate(all_results,floatfmt=".4f",numalign='center',tablefmt="latex",headers=HEADER))


        if order:
            print tabulate(all_complete_results,headers=HEADER_ORDER)
        else:
            print tabulate(all_complete_results,headers=HEADER_COMPLETE)

        if order:
            # now delete this stuff from the order again
            for x in all_results:
                del(x[1])

        if not os.path.isfile(RESFILE):
            # just save our stuff to the client file
            with open(RESFILE, 'w') as outfile:
                    outdict = {}
                    outdict[args.csvfile] = all_results
                    json.dump(outdict, outfile)
        else:
            #now open the file for reading and writing
            with open(RESFILE, 'r') as outfile:
                outdict = json.load(outfile)
                outdict[args.csvfile] = all_results
            with open(RESFILE, 'w') as outfile:
                json.dump(outdict, outfile, indent=2)

if __name__ == "__main__":
	main()
