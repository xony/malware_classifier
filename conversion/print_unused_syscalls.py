#!/usr/bin/env python

import argparse, string, os, json 
import numpy as np
from sklearn import preprocessing
def help():
	parser = argparse.ArgumentParser(description='This script shows unused features.')
	parser.add_argument('benjsonfile', action='store', help='path to ben JSON tracefile') 
	parser.add_argument('maljsonfile', action='store', help='path to mal JSON tracefile') 
	return parser.parse_args()

def dict_to_list (leave_out, current_dict):
        l = [] # the list to give back
        for item in current_dict:
            if item not in leave_out:
                for i in current_dict[item]:
                    l.append([float(j) for j in i])
                #l.extend([float(i) for i in current_dict[item]])
        return l


def main():
	args = help()


       

        with open("../mapping_tight.json",'r') as infile:
            mapping = json.load(infile)

        with open(args.benjsonfile, 'r') as infile:
            ben_json_dict = json.load(infile)

        with open(args.maljsonfile, 'r') as infile:
            mal_json_dict = json.load(infile)

        ben_vector_list = np.array( dict_to_list([], ben_json_dict) )
        mal_vector_list = np.array( dict_to_list([], mal_json_dict) )

        sum_vector = np.sum(ben_vector_list, axis=0)
        sum_vector += np.sum(mal_vector_list, axis=0)


        unused_features = []
        unused_indices = []
        for i in xrange(len(sum_vector)):
            if sum_vector[i] == 0:
                unused_features.append(mapping[i])
                unused_indices.append(i)

        print unused_features
        print len(unused_features)

        with open("unused_features_indices_start0.json", 'w') as outfile:
            json.dump(unused_indices, outfile)
       
        with open("unused_features_names.json", 'w') as outfile:
            json.dump(unused_features, outfile)
       

if __name__ == "__main__":
	main()
